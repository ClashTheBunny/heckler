name: Publish

on:
  push:
    branches:
      - main
      - setup_instructions
    tags:
      - v*

env:
  DEBIAN_CODENAME: bookworm

jobs:
  check_utility_container:
    name: Checks for this tag's utility container
    runs-on: ubuntu-latest
    outputs:
      exists: ${{ steps.check_version.outputs.exists }}
      dockerfile_sha: ${{ steps.check_version.outputs.dockerfile_sha }}
      repo_lc: ${{ steps.check_version.outputs.repo_lc }}
      repo_owner_lc: ${{ steps.check_version.outputs.repo_owner_lc }}
      shortref: ${{ steps.check_version.outputs.shortref }}
      date: ${{ steps.check_version.outputs.date }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.ref }}

    - name: Check package version
      id: check_version
      run: |
        shortref=${GITHUB_SHA::8}
        SHA256SUM=$(sha256sum Dockerfile.${DEBIAN_CODENAME} | awk '{print $1}')
        repo_lc="$(echo ${{ github.repository }} | tr '[A-Z]' '[a-z]')"
        REPO_OWNER_LC="$(echo ${{ github.repository_owner }} | tr '[A-Z]' '[a-z]')"
        echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u USERNAME --password-stdin
        RESULT=$(docker inspect ghcr.io/${repo_lc}-builder:${SHA256SUM} 1>&2; echo $?)
        echo "::set-output name=exists::$RESULT"
        echo "::set-output name=repo_lc::$repo_lc"
        echo "::set-output name=repo_owner_lc::$REPO_OWNER_LC"
        echo "::set-output name=date::$(date --utc --iso-8601=seconds)"
        echo "::set-output name=dockerfile_sha::${SHA256SUM::8}"
        echo "::set-output name=shortref::$shortref"

    - name: Create Release
      id: create_release
      uses: ncipollo/release-action@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag: ${{ steps.check_version.outputs.shortref }}
        name: Release ${{ steps.check_version.outputs.shortref }}
        draft: false
        prerelease: false
        allowUpdates: true

  build_and_upload_utility_container:
    name: Builds and uploads a docker image used to build heckler
    runs-on: ubuntu-latest
    needs: check_utility_container
    if: ${{ needs.check_utility_container.outputs.exists }} == '1'

    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.ref }}

    - id: pull_intermediates
      run: |
        docker pull ghcr.io/${{ needs.check_utility_container.outputs.repo_lc }}-builder:${{ needs.check_utility_container.outputs.dockerfile_sha }} || true

    - uses: macbre/push-to-ghcr@master
      name: Build and publish to ghcr
      with:
        dockerfile: Dockerfile.${{ env.DEBIAN_CODENAME }}
        image_name: ${{ needs.check_utility_container.outputs.repo_lc }}-builder
        github_token: ${{ secrets.GITHUB_TOKEN }}
        image_tag: latest
        # docker_io_token: ${{ secrets.DOCKER_IO_TOKEN }}

    - uses: macbre/push-to-ghcr@master
      name: Build and publish to ghcr
      with:
        dockerfile: Dockerfile.${{ env.DEBIAN_CODENAME }}
        image_name: ${{ needs.check_utility_container.outputs.repo_lc }}-builder
        github_token: ${{ secrets.GITHUB_TOKEN }}
        image_tag: ${{ needs.check_utility_container.outputs.dockerfile_sha }}
        # docker_io_token: ${{ secrets.DOCKER_IO_TOKEN }}

  build_and_upload_zip:
    name: Builds and uploads a zip each for heckler and rizzo
    runs-on: ubuntu-latest
    needs: [build_and_upload_utility_container, check_utility_container]

    steps:
    - uses: actions/checkout@v3
      with:
        ref: ${{ github.ref }}

    - id: pull_intermediates
      run: |
        docker pull ghcr.io/${{ needs.check_utility_container.outputs.repo_lc }}-builder:${{ needs.check_utility_container.outputs.dockerfile_sha }} || true

    - run: |
        make docker-build REGISTRY=ghcr.io REGISTRY_USER=${{ needs.check_utility_container.outputs.repo_owner_lc }} DEBIAN_CODENAME=${{ env.DEBIAN_CODENAME }}

    - run: |
        zip heckler.zip *.tmpl doc/sample-configs/hecklerd_conf.yaml heckler hecklerd
        zip rizzo.zip doc/sample-configs/rizzo_conf.yaml rizzod rizzo-rev

    - name: Upload Release Asset Heckler
      id: upload-release-asset-heckler
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.check_utility_container.outputs.upload_url }}
        asset_name: heckler.zip
        asset_path: ./heckler.zip
        asset_content_type: application/zip

    - name: Upload Release Asset Rizzo
      id: upload-release-asset-rizzo
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.check_utility_container.outputs.upload_url }}
        asset_name: rizzo.zip
        asset_path: ./rizzo.zip
        asset_content_type: application/zip

    - uses: docker/setup-qemu-action@v2

    - uses: docker/setup-buildx-action@v2

    - uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - uses: macbre/push-to-ghcr@master
      name: Build and publish to ghcr
      with:
        image_name: ${{ needs.check_utility_container.outputs.repo_lc }}-heckler
        github_token: ${{ secrets.GITHUB_TOKEN }}
        dockerfile: Dockerfile.heckler
        # docker_io_token: ${{ secrets.DOCKER_IO_TOKEN }}

    - uses: macbre/push-to-ghcr@master
      name: Build and publish to ghcr
      with:
        image_name: ${{ needs.check_utility_container.outputs.repo_lc }}-rizzo
        github_token: ${{ secrets.GITHUB_TOKEN }}
        dockerfile: Dockerfile.rizzo
        # docker_io_token: ${{ secrets.DOCKER_IO_TOKEN }}

    - name: Start SSH via Ngrok
      id: ngrok
      if: ${{ failure() }}
      run: curl -sL https://gist.githubusercontent.com/ClashTheBunny/ac7ca189e1f8ab9eb5686662412a4cce/raw/7099b9db76729dc5761da72aa8525f632d8875c9/debug-github-actions.sh | bash
      env:
        # After sign up on the https://ngrok.com/
        # You can find this token here: https://dashboard.ngrok.com/get-started/setup
        NGROK_TOKEN: ${{ secrets.NGROK_TOKEN }}

        # This password you will use when authorizing via SSH
        USER_PASS: ${{ secrets.USER_PASS }}
    - name: Sleep 1 hour
      if: ${{ failure() }}
      run: sleep 1h
